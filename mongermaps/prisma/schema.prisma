// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  email            String?   @unique
  emailVerified    DateTime?
  name             String?
  username         String    @unique
  password         String?
  forumUsername    String?
  image            String?
  accounts         Account[]
  sessions         Session[]
  reports          Report[]
  subscriptions    Subscription[]
  referrals        Referral[]
  referredBy       Referral?  @relation("ReferredUser")
  commissions      Commission[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Alpha Tester Model
model AlphaTester {
  id            String   @id @default(cuid())
  forumUsername String
  email         String   @unique
  createdAt     DateTime @default(now())
}

// Lead Generation Model
model Lead {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

// Subscription Model
model Subscription {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  type             SubscriptionType
  status           SubscriptionStatus
  startDate        DateTime
  endDate          DateTime?
  stripeSessionId  String?
  btcPayInvoiceId  String?
  amount           Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

enum SubscriptionType {
  TRIP_PASS
  ANNUAL
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

// Venue Model
model Venue {
  id            String      @id @default(cuid())
  name          String
  type          VenueType
  district      String
  latitude      Float
  longitude     Float
  address       String?
  description   String?
  avgGfeScore   Float?
  avgPriceST    Float?
  avgPriceLT    Float?
  reports       Report[]
  scrapedPosts  ScrapedPost[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([type, district])
  @@index([avgGfeScore])
}

enum VenueType {
  GOGO_BAR
  BEER_BAR
  GENTLEMENS_CLUB
  MASSAGE_PARLOR
  HOTEL
  RESTAURANT
  OTHER
}

// Report Model (User-submitted)
model Report {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  venueId         String
  venue           Venue    @relation(fields: [venueId], references: [id])
  gfeScore        Int      // 1-10
  priceST         Float?
  priceLT         Float?
  serviceQuality  Int      // 1-10
  attractiveness  Int      // 1-10
  bbfsOffered     Boolean  @default(false)
  starfishRating  Int?     // 1-10 (1 = total starfish, 10 = very active)
  comment         String?  @db.Text
  visitDate       DateTime
  createdAt       DateTime @default(now())
  
  @@index([venueId, createdAt])
  @@index([userId])
}

// Scraped Data Model
model ScrapedPost {
  id             String   @id @default(cuid())
  postContent    String   @db.Text
  username       String
  postDate       DateTime
  venueId        String?
  venue          Venue?   @relation(fields: [venueId], references: [id])
  pricesMentioned Json?   // Array of prices found
  keywords       Json?    // Object with keyword counts
  sourceUrl      String?
  createdAt      DateTime @default(now())
  
  @@index([venueId])
  @@index([postDate])
}

// Referral System
model Referral {
  id           String   @id @default(cuid())
  referrerId   String
  referrer     User     @relation(fields: [referrerId], references: [id])
  referredId   String   @unique
  referred     User     @relation("ReferredUser", fields: [referredId], references: [id])
  clickCount   Int      @default(0)
  converted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  
  @@index([referrerId])
}

model Commission {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  amount       Float
  status       CommissionStatus
  paidAt       DateTime?
  btcTxId      String?
  createdAt    DateTime @default(now())
  
  @@index([userId, status])
}

enum CommissionStatus {
  PENDING
  PAID
  CANCELLED
}